        all_containers_hash: "{{ container_config_data.configs }}"
      container_config_data:
  container_config_data:
  container_config_data:
    # container_config_data.py without overrides
        # handle overrides similar to container_config_data
module: container_config_data
      register: container_config_data
  container_puppet_config:
  container_puppet_config:
  container_puppet_config:
module: container_puppet_config
        # When container_puppet_config is called at step1, it's to initialize
    dest: "{{ edpm_container_standalone_container_startup_config_dir }}/{{ edpm_container_standalone_service }}/{{ item.key }}.json"
    edpm_container_manage_config: "{{ edpm_container_standalone_container_startup_config_dir }}/{{ edpm_container_standalone_service }}"
edpm_container_standalone_container_startup_config_dir: /var/lib/edpm-config/container-startup-config
- name: Create {{ edpm_container_standalone_container_startup_config_dir }}/{{ edpm_container_standalone_service }}
    path: "{{ edpm_container_standalone_container_startup_config_dir }}/{{ edpm_container_standalone_service }}"
  edpm_container_config_scripts:
module: edpm_container_config_scripts
  edpm_container_configs:
module: edpm_container_configs
  edpm_container_image_prepare:
module: edpm_container_image_prepare
# All variables within this role should have a prefix of "edpm_container_manage"
    concurrency: "{{ edpm_container_manage_concurrency }}"
    config_dir: "{{ edpm_container_manage_config }}"
    config_id: "{{ edpm_container_manage_config_id }}"
      config_id=edpm_container_manage_config_id, check_config=False,
        config_overrides: "{{ edpm_container_manage_config_overrides }}"
    config_overrides: "{{ edpm_container_manage_config_overrides }}"
        config_path: "{{ edpm_container_manage_config }}"
        config_pattern: "{{ edpm_container_manage_config_patterns }}"
    config_patterns: "{{ edpm_container_manage_config_patterns }}"
        debug: "{{ edpm_container_manage_debug }}"
    debug: "{{ edpm_container_manage_debug | bool }}"
  description: EDPM OpenStack Role -- edpm_container_manage
    edpm_container_cli: "{{ edpm_container_manage_cli }}"
        - edpm_container_manage
  edpm_container_manage
  edpm_container_manage:
        - edpm_container_manage_check_puppet_config|bool
edpm_container_manage_check_puppet_config: false
        - edpm_container_manage_clean_orphans|bool
    edpm_container_manage_clean_orphans: false
    edpm_container_manage_clean_orphans: false
edpm_container_manage_clean_orphans: true
    - edpm_container_manage_cli == 'podman'
    - edpm_container_manage_cli == 'podman'
    - edpm_container_manage_cli == 'podman'
edpm_container_manage_cli: podman
edpm_container_manage_concurrency: 1
    edpm_container_manage_config: "{{ edpm_container_standalone_container_startup_config_dir }}/{{ edpm_container_standalone_service }}"
    edpm_container_manage_config: "{{ edpm_container_standalone_container_startup_config_dir }}/{{ edpm_container_standalone_service }}"
edpm_container_manage_config_id: edpm
    edpm_container_manage_config_id: "{{ edpm_container_standalone_service }}"
    edpm_container_manage_config_overrides:
    edpm_container_manage_config_overrides:
edpm_container_manage_config_overrides: {}
    edpm_container_manage_config_patterns: 'fedora.json'
    edpm_container_manage_config_patterns: 'fedora.json'
    edpm_container_manage_config_patterns: 'fedora_*.json'
    edpm_container_manage_config_patterns: 'fedora_*.json'
    edpm_container_manage_config_patterns: 'fedora_*.json'
    edpm_container_manage_config_patterns: 'feduraaa.json'
    edpm_container_manage_config_patterns: "*.json"
    edpm_container_manage_config_patterns: '*.json'
    edpm_container_manage_config_patterns: '*.json'
    edpm_container_manage_config_patterns: '*.json'
edpm_container_manage_config_patterns: '*.json'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
    edpm_container_manage_config: '/tmp/container-configs'
edpm_container_manage_config: "/var/lib/edpm-config/"
edpm_container_manage_create_retries: 120
edpm_container_manage_debug: "{{ ((ansible_verbosity | int) >= 2) | bool }}"
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
    edpm_container_manage_debug: true
edpm_container_manage_exec_retries: 120
edpm_container_manage_healthcheck_disabled: false
    edpm_container_manage_healthcheck_disabled: true
edpm_container_manage_hide_sensitive_logs: "{{ hide_sensitive_logs | default(true) }}"
edpm_container_manage_log_path: '/var/log/containers/stdouts'
        edpm_container_manage role.
    - edpm_container_manage_systemd_teardown | bool
edpm_container_manage_systemd_teardown: true
# "edpm_container_manage" will search for and load any operating system variable file
    later consumed by edpm_container_manage role.
module: edpm_container_manage
- name: Configure edpm_container_manage to generate systemd drop-in dependencies
- name: Configure edpm_container_manage to not generate drop-in dependencies
    - name: "Create containers from {{ edpm_container_manage_config }}"
- name: "Create containers managed by Podman for {{ edpm_container_manage_config }}"
    - name: "Delete orphan containers from {{ edpm_container_manage_config }}"
- name: "Delete orphan containers managed by Podman for {{ edpm_container_manage_config }}"
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
        name: edpm_container_manage
    name: edpm_container_manage
    name: edpm_container_manage
    - name: "Find all matching configs configs for in {{ edpm_container_manage_config }}"
- name: "Manage containers from {{ edpm_container_manage_config }}"
- name: "Manage container systemd services and cleanup old systemd healthchecks for {{ edpm_container_manage_config }}"
  no_log: "{{ not edpm_container_manage_debug }}"
  no_log: "{{ not (edpm_container_manage_debug | bool) }}"
    path: "{{ edpm_container_manage_log_path }}"
    systemd_healthchecks: "{{ (not edpm_container_manage_healthcheck_disabled | bool) }}"
# tell the edpm_container_manage to inject
      This file makes edpm_container_manage generate additional systemd
      edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
module: edpm_os_net_config_mappings
      edpm_os_net_config:
  edpm_os_net_config:
      edpm_os_net_config_mappings:
      edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
  edpm_os_net_config_mappings:
module: edpm_os_net_config
module: edpm_os_net_config_mappings
module: edpm_os_net_config_mappings
    - name: Manage NetworkConfig with edpm_os_net_config module
    - name: Run edpm_os_net_config_module with network_config
        - name: Run NetworkConfig with edpm_os_net_config
  edpm_ovn_mac_addresses:
  edpm_ovn_mac_addresses:
  edpm_ovn_mac_addresses:
module: edpm_ovn_mac_addresses
